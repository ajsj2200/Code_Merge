[Coding Guide]

Common naming conventions
The name should be legible and clear enough for other teams to recognize.

Make the name fit the purpose and intent.

Don't worry about the length of the name. It's much more important that the code is immediately understandable to the first person who sees it.

It's not a good idea to abbreviate it by removing letters between words. However, if the abbreviation is on Wikipedia and is common enough that anyone can recognize it, it is acceptable. It's preferable if the abbreviation is commonly used, such as i for iteration variable and T for template.

 

File names
File names should be all lowercase and contain only underscores ( _ ) and dashes ( - ) as special characters.

 

<Example

my_useful_class.cc
my-useful-class.cc
myusefulclass.cc
myusefulclass_test.cc 


The C++ files must end with .cc and the header files must end with .h.

Do not use names that are already included in /usr/include as filenames. (e.g. db.h)

In general, filenames should be very specific.

For example, http_server_logs.h is preferable to logs.h.

Related files should be named in pairs. (e.g. foo_bar.h , foo_bar.cc)

 

Type names
Type names do not contain underscores ( _ ), start with a capital letter, and each word is capitalized.

 

<Example

class UrlTableTester { ...
typedef hash_map<UrlTableProperties *, std::string> PropertiesMap;
using PropertiesMap = hash_map<UrlTableProperties *, std::string>;
enum UrlTableErrors { ...
 

Variable names
- Common variable names
All are in lowercase letters, and each word is followed by an underscore ( _ ).

The names of member variables of a class end with an underscore ( _ ). (except for structs)

 

<example

std::string table_name;
std::string a_struct_data_member;
std::string a_class_data_member_;
 

- Constant names
Constants declared as const are separated by a "k" and each word is capitalized.

The underscore ( _ ) is used as a delimiter only when capitalization is not possible.

 

<Example

const int kDaysInAWeek = 7;
const int Android8_0_0 = 24; // Android 8.0.0
 

- Function names
Normal functions start with a capital letter, and each word is also capitalized.

 

<Example

AddTableEntry()
DeleteUrl()
OpenFileOrDie()
 

- Namespace names
Namespace names are all lowercase, and the top-level namespace name is based on the project name.

Avoid conflicts with well-known top-level namespace names. It usually includes the name of the team or member's project.

 

- Macro names
Let's be honest, we don't use macros much.

However, if you really need to use them, capitalize them and enclose them in underscores ( _ ).

 

<Example

#define ROUND(x) ...
#define PI_ROUNDED 3.0
 

Comments
Comments are essential for the readability of your code.

However, really good code is code that reads itself without comments.

Comments should be written generically because anyone can read them later.

 

- Common comment styles
Both // and /* */ are desirable, but use them consistently.

It is more common to use //.

 

- Comments about classes
Describe where and how the class is used.

 

<Example

// Iterates over the contents of a GargantuanTable.
// Example:
// GargantuanTableIterator* iter = table->NewIterator();
// for (iter->Seek("foo"); !iter->done(); iter->Next()) {
// process(iter->key(), iter->value());
// }
// delete iter;
class GargantuanTableIterator { 
... 
};
 

- Comments about functions
Every function must be preceded where it is declared by a comment explaining how it is used.

Comments about functions start with a verb and are more descriptive than commands. (e.g. Opens the file)

// Returns an iterator for this table. It is the client's
// responsibility to delete the iterator when it is done with it,
// and it must not use the iterator once the GargantuanTable object
// on which the iterator was created has been deleted.
//
// The iterator is initially positioned at the beginning of the table.
//
// This method is equivalent to:
// Iterator* iter = table->NewIterator();
// iter->Seek("");
// return iter;
// If you are going to immediately seek to another place in the
// returned iterator, it will be faster to use NewIterator()
// and avoid the extra seek.
Iterator* GetIterator() const;
However, we don't use too much unnecessarily and only state the ambiguous things explicitly.

 

- TODO annotations
TODO annotations are short-lived and should only be used temporarily.

Like TODO, they are formatted in all capital letters so that they can be searched for later.

TODOs are used with the author's name, email, bug ID, etc. to reference the issue.

 

<Example.

// TODO(jwk70915@gmail.com): Use a "*" here for concatenation operator.
// TODO(Jinuk) change this to use relations.
// TODO(bug 12345): remove the "Last visitors" feature
 

Some conventions may be new to some people, such as capitalizing functions.

I think it's a really good rule to have, as long as everyone you collaborate with follows it.

Translated with DeepL.com (free version)